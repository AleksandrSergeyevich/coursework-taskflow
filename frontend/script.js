class TaskFlowApp {
    constructor() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
        this.token = localStorage.getItem('taskflow_token') || null;
        this.userId = localStorage.getItem('taskflow_user_id') || null;
        this.init();
    }

    init() {
        if (this.token) {
            this.showApp();
            this.loadTasks();
        } else {
            this.showAuth();
        }
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    async login() {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const messageEl = document.getElementById('authMessage');

        if (!username || !password) {
            messageEl.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
            messageEl.style.color = 'red';
            return;
        }

        try {
            const response = await fetch('http://192.168.50.94:5000/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            const data = await response.json();
            
            // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –¢–û–ö–ï–ù
            this.token = data.token;
            this.userId = data.user_id;
            localStorage.setItem('taskflow_token', this.token);
            localStorage.setItem('taskflow_user_id', this.userId);

            this.showApp();
            this.loadTasks();
        } catch (err) {
            messageEl.textContent = err.message;
            messageEl.style.color = 'red';
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    async register() {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const messageEl = document.getElementById('authMessage');

        if (!username || !password) {
            messageEl.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
            messageEl.style.color = 'red';
            return;
        }

        try {
            const response = await fetch('http://192.168.50.94:5000/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            }

            messageEl.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.';
            messageEl.style.color = 'green';
        } catch (err) {
            messageEl.textContent = err.message;
            messageEl.style.color = 'red';
        }
    }

    // –í—ã—Ö–æ–¥
    logout() {
        this.token = null;
        this.userId = null;
        localStorage.removeItem('taskflow_token');
        localStorage.removeItem('taskflow_user_id');
        this.showAuth();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    showAuth() {
        document.getElementById('authSection').style.display = 'block';
        document.getElementById('appSection').style.display = 'none';
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    showApp() {
        document.getElementById('authSection').style.display = 'none';
        document.getElementById('appSection').style.display = 'block';
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
    async loadTasks() {
        const statusFilter = document.getElementById('statusFilter').value;
        const url = statusFilter ? 
            `http://192.168.50.94:5000/tasks?status=${statusFilter}` : 
            'http://192.168.50.94:5000/tasks';

        try {
            const response = await fetch(url, {
                headers: { 
                    'Authorization': `Bearer ${this.token}`  // ‚Üê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–û–ö–ï–ù
                }
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');

            const tasks = await response.json();
            this.renderTasks(tasks);
        } catch (err) {
            console.error(err);
            document.getElementById('tasksList').innerHTML = 
                `<div style="color: red; padding: 20px;">${err.message}</div>`;
        }
    }

    // –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á
    async searchTasks() {
        const query = document.getElementById('searchInput').value;
        if (!query) {
            this.loadTasks();
            return;
        }

        try {
            const response = await fetch(`http://192.168.50.94:5000/tasks/search?q=${query}`, {
                headers: { 
                    'Authorization': `Bearer ${this.token}`  // ‚Üê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–û–ö–ï–ù
                }
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');

            const tasks = await response.json();
            this.renderTasks(tasks);
        } catch (err) {
            console.error(err);
        }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    filterTasks() {
        this.loadTasks();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    async addTask() {
        const title = document.getElementById('taskTitle').value.trim();
        const description = document.getElementById('taskDescription').value.trim();

        if (!title) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
            return;
        }

        try {
            const response = await fetch('http://192.168.50.94:5000/tasks', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`  // ‚Üê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–û–ö–ï–ù
                },
                body: JSON.stringify({ title, description })
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');

            document.getElementById('taskTitle').value = '';
            document.getElementById('taskDescription').value = '';
            this.loadTasks();
        } catch (err) {
            alert(err.message);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    async updateTaskStatus(taskId, newStatus) {
        try {
            const response = await fetch(`http://192.168.50.94:5000/tasks/${taskId}/status`, {
                method: 'PUT',
                headers: { 
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`  // ‚Üê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–û–ö–ï–ù
                },
                body: JSON.stringify({ status: newStatus })
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');

            this.loadTasks();
        } catch (err) {
            alert(err.message);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    async deleteTask(taskId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) return;

        try {
            const response = await fetch(`http://192.168.50.94:5000/tasks/${taskId}`, {
                method: 'DELETE',
                headers: { 
                    'Authorization': `Bearer ${this.token}`  // ‚Üê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–û–ö–ï–ù
                }
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');

            this.loadTasks();
        } catch (err) {
            alert(err.message);
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á
    renderTasks(tasks) {
        const container = document.getElementById('tasksList');
        container.innerHTML = '';

        if (tasks.length === 0) {
            container.innerHTML = '<div class="no-tasks">–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }

        tasks.forEach(task => {
            const card = document.createElement('div');
            card.className = `task-card status-${task.status}`;
            card.innerHTML = `
                <div class="task-title">${task.title}</div>
                ${task.description ? `<div class="task-description">${task.description}</div>` : ''}
                <div class="task-meta">
                    <span>–°—Ç–∞—Ç—É—Å: <strong>${task.status}</strong></span>
                    <span>–°–æ–∑–¥–∞–Ω–∞: ${new Date(task.created_at).toLocaleDateString()}</span>
                </div>
                <div class="task-actions">
                    ${task.status !== '–í —Ä–∞–±–æ—Ç–µ' ? 
                        `<button class="btn-start" onclick="app.updateTaskStatus(${task.id}, '–í —Ä–∞–±–æ—Ç–µ')">‚ñ∂Ô∏è –í —Ä–∞–±–æ—Ç—É</button>` : 
                        `<button class="btn-complete" onclick="app.updateTaskStatus(${task.id}, '–ó–∞–≤–µ—Ä—à–µ–Ω–∞')">‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å</button>`}
                    <button class="btn-delete" onclick="app.deleteTask(${task.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `;
            container.appendChild(card);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new TaskFlowApp();

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
function login() { app.login(); }
function register() { app.register(); }
function logout() { app.logout(); }
function addTask() { app.addTask(); }
function searchTasks() { app.searchTasks(); }
function filterTasks() { app.filterTasks(); }
