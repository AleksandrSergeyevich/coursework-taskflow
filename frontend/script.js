const taskList = document.getElementById('taskList');
const taskInput = document.getElementById('taskInput');

async function loadTasks() {
    taskList.innerHTML = '<li>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</li>';
    try {
        const res = await fetch('http://192.168.50.94:5000/tasks'); // ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô IP!
        if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        const tasks = await res.json();
        taskList.innerHTML = '';
        if (tasks.length === 0) {
            taskList.innerHTML = '<li>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</li>';
        } else {
            tasks.forEach(task => {
                const li = document.createElement('li');
                li.innerHTML = `
                    ${task.title} 
                    <span class="delete-btn" onclick="deleteTask(${task.id})">üóëÔ∏è</span>
                `;
                taskList.appendChild(li);
            });
        }
    } catch (err) {
        taskList.innerHTML = `<li style="color: red">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}</li>`;
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:", err);
    }
}

async function addTask() {
    const title = taskInput.value.trim();
    if (!title) {
        alert('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');
        return;
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    taskInput.disabled = true;
    const originalValue = taskInput.value;
    taskInput.value = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...';

    try {
        const res = await fetch('http://192.168.50.94:5000/tasks', { // ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô IP!
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title })
        });
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`HTTP ${res.status}: ${errorText}`);
        }
        await loadTasks();
        taskInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
    } catch (err) {
        alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${err.message}`);
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err);
    } finally {
        taskInput.disabled = false;
        if (taskInput.value === '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...') {
            taskInput.value = originalValue;
        }
    }
}

async function deleteTask(id) {
    if (!confirm('‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) return;

    try {
        const res = await fetch(`http://192.168.50.94:5000/tasks/${id}`, { // ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô IP!
            method: 'DELETE'
        });
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`HTTP ${res.status}: ${errorText}`);
        }
        await loadTasks();
    } catch (err) {
        alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${err.message}`);
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadTasks);
